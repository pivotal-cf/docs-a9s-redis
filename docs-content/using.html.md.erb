---
title: Using a9s Redis for PCF
owner: Partners
---
<style>
    .note.warning {
        background-color: #fdd;
        border-color: #fbb
    }
    .note.warning:before {
        color: #f99;
     }
</style>

This topic describes how to use a9s Redis for PCF after it has been successfully installed. For more information, see the [Installing and Configuring a9s Redis for PCF](./installing.html) topic.

##<a id='using'></a>Use a9s Redis for PCF with an App

To use a9s Redis for PCF with an application, create a service instance and bind the service instance
to your application. For more information on managing service instances, see <a href="http://docs.pivotal.io/pivotalcf/devguide/services/managing-services.html" target="_blank">Managing Service Instances with the cf CLI</a>.

###<a id='view-service'></a> View the a9s Redis for PCF Service

After the tile is installed, you can see the `a9s-redis32` and its service plans appear in your PCF marketplace. Run `cf marketplace` to see the service listing:
<pre class="terminal">
$ cf marketplace
Getting services from marketplace in org test / space test as admin...
OK
service      plans                                           description
a9s-redis32  redis-single-small, redis-single-big            This is the anynines Redis 32 service.
</pre>

For more information on available service plans, see [Configure Service Plans](./installing.html#configure-service-instance).

###<a id='create-instance'></a> Create a Service Instance

To provision a Redis database, run `cf create-service`. For example.

<pre class="terminal">
$ cf create-service a9s-redis32 redis-single-small my-redis-service
</pre>

Depending on your infrastructure and service broker utilization, it may take several minutes to create the service instance.

Run the `cf services` command to view the creation status. This command displays a list of all your service instances. To view the status of a specific service instance, run `cf service NAME-OF-YOUR-SERVICE`.

### Bind an Application to a Service Instance

After your database is created, run `cf bind-service` to bind the service to your application:

<pre class="terminal">
$ cf bind-service a9s-redis-app my-redis-service
</pre>

###<a id='restage'></a> Restage or Restart Your Application

To enable your app to access the service instance, run `cf restage` or `cf restart` to restage or restart your application

##<a id='credentials'></a> Obtain Credentials for Accessing Your Service Instance

After a service instance is bound to an application, the credentials of your Redis database are stored in the environment variables of the application. Run `cf env APP-NAME` to display the environment variables.

You can find the credentials in the <a href="http://docs.pivotal.io/pivotalcf/devguide/deploy-apps/environment-variable.html#VCAP-SERVICES" target="_blank">VCAP_SERVICES</a> key.

<pre class="terminal">
$ cf env a9s-redis-app
Getting env variables for app a9s-redis-app in org test / space test as admin...
OK

System-Provided:
{
 "VCAP_SERVICES": {
  "a9s-redis": [
   {
    "credentials": {
     "host": "EXAMPLE-HOST",
     "password": "EXAMPLE-PWD",
     "port": 6379
    },
    "label": "a9s-redis",
    "name": "my-redis-service",
    "plan": "redis-single-non-persistent-small",
   }
  ]
 }
}
...
</pre>

You can use the host and password values to connect to your database with a Redis client.

##<a id='deleting'></a> Delete a a9s Redis for PCF Service Instance

<p class="note warning"><strong>Warning:</strong> : Before deleting a service instance, you must backup data stored in your database. This operation cannot be undone and all the data is lost when the service is deleted.</p>

Before you can delete a service instance, you must unbind it from all applications.

###<a id='list-instances'></a> List Available Services

Run `cf services` to list available services.

<pre class="terminal">
$ cf services

Getting services in org test / space test as admin...
OK

name                 service       plan                   bound apps        last operation
my-redis-service     a9s-redis     redis-single-small     a9s-redis-app     create succeeded
</pre>

This example shows that `my-redis-service` is bound to the `a9s-redis-app` application.

###<a id='unbind-instance'></a>Unbind a Service Instance

Run `cf unbind-service` to unbind the service from your application:

<pre class="terminal">
$ cf unbind-service a9s-redis-app my-redis-service
</pre>

###<a id='delete-instance'></a> Delete a Service Instance

After unbinding the service, it is no longer bound to an application. Run `cf delete-service` to delete the service:

<pre class="terminal">
$ cf delete-service my-redis-service
</pre>

It may take several minutes to delete the service. Deleting a service deprovisions the corresponding infrastructure resources.
Run the `cf services` command to view the deletion status.


##<a id='upgrade-service-plan'></a> Upgrade the Service Instance to another Service Plan

Once created, you can upgrade your service instance to another, larger service plan. A larger service plan provides more CPU, RAM and storage. For more information, see the  <a href="http://docs.pivotal.io/pivotalcf/devguide/services/managing-services.html#update_service" target="_blank">Update a Service Instance</a> of the _Managing Service Instances with the cf CLI_ topic.

<pre class="terminal">
$ cf update-service my-redis-service -p a-bigger-plan
</pre>

Here are the plans you can upgrade to depending on the one you are currently
using:

* If you are currently using the `redis-single-small`plan, you can upgrade to `redis-single-big`plan.

##<a id='redis-persitence'></a>Change RDB Persistence Settings

a9s Redis for PCF supports RDB persistence with point in time snapshots.
This setting can be changed by the user.

### Default behavior

| Setting | Effect |
|---------|--------|
| save 900 1 | Create a snapshot after 900 seconds if 1 write operations occurred. |
| save 300 10 | Create a snapshot after 300 seconds if 10 write operations occurred. |
| save 60 10000 | Create a snapshot after 300 seconds if 10 write operations occurred. |

### Configuring RDB
You can configure RDB according to the needs of your apps by providing customer settings. This setting must follow the original Redis configuration for RDB `-c {"snapshot": "['save 900 1', 'save 300 10']"}`.

<pre class="terminal">
  $ cf update-service my-redis-service -c {"snapshot": "['save 900 1', 'save 300 10']"}
</pre>

In this example, it will configure to snapshot Redis database according to the following rules:

| Setting | Effect |
|---------|--------|
| save 900 1 | Create a snapshot after 900 seconds if 1 write operations occurred. |
| save 300 10 | Create a snapshot after 300 seconds if 10 write operations occurred. |

### Cache only
You can disable snapshots and use Redis as cache only by creating the service with the following customer setting `-c '{"snapshot": "[]"}'`.

The command would be:

<pre class="terminal">
  $ cf update-service my-redis-service -c {"snapshot": "[]"}
</pre>


For more information see the snapshot settings in the documentation of <a href="https://redis.io/topics/persistence" target="_blank">Redis Persistence</a>.

##<a id='add-graphite-endpoint'></a>Add a Graphite Endpoint

If you want to monitor your service with Graphite, you can set an endpoint to
where to information will be sent with the `cf update-service` command. This command expects the <a href="http://docs.pivotal.io/pivotalcf/devguide/services/managing-services.html#arbitrary-params-update" target="_blank">-c flag</a>
and a JSON string containing the `graphite` and `metrics_prefix` keys.

<pre class="terminal">
$ cf update-service my-redis-service -c '{ "graphite": ["yourspace.your-graphite-endpoint.com:12345"], "metrics_prefix": "your-api-key.my-redis" }'
</pre>

##<a id='add-syslog-endpoint'></a>Add a Syslog Endpoint

The `cf update-service` command used with the <a href="http://docs.pivotal.io/pivotalcf/devguide/services/managing-services.html#arbitrary-params-update" target="_blank">-c flag</a> can let you stream your syslog to a third-party service. In this case, the command expects a JSON string containing the `syslog` key.

<pre class="terminal">
$ cf update-service my-redis-service -c '{ "syslog": ["logs4.your-syslog-endpoint.com:54321"] }'
</pre>
