---
title: Using a9s Redis for PCF
owner: Partners
---

This topic describes how to use a9s Redis for PCF after it has been successfully installed. For more information, see the [Installing and Configuring a9s Redis for PCF](./installing.html) topic.

##<a id='using'></a>Use a9s Redis for PCF with an App

To use a9s Redis for PCF with an app, create a service instance and bind the service instance
to your app. For more information about managing service instances, see <a href="http://docs.pivotal.io/pivotalcf/devguide/services/managing-services.html" target="_blank">Managing Service Instances with the cf CLI</a>.

###<a id='view-service'></a> View the a9s Redis for PCF Service

After the tile is installed, you can see the `a9s-redis32` and its service plans appear in your PCF marketplace. Run `cf marketplace` to see the service listing:
<pre class="terminal">
$ cf marketplace
Getting services from marketplace in org test / space test as admin...
OK
service        plans                                                                           description
a9s-redis32    redis-single-small, redis-single-big, redis-cluster-small, redis-cluster-big    This is the anynines Redis 32 service.
</pre>

For more information about available service plans, see [Configure Service Plans](./installing.html#configure-service-instance).

###<a id='create-instance'></a> Create a Service Instance

To provision a Redis database, run `cf create-service`. For example.

<pre class="terminal">
$ cf create-service a9s-redis32 redis-single-small my-redis-service
</pre>

Depending on your infrastructure and service broker utilization, it might take several minutes to create the service instance.

Run the `cf services` command to view the creation status. This command displays a list of all your service instances. To view the status of a specific service instance, run `cf service NAME-OF-YOUR-SERVICE`.

### Bind an App to a Service Instance

After your database is created, run `cf bind-service` to bind the service to your app:

<pre class="terminal">
$ cf bind-service a9s-redis-app my-redis-service
</pre>

###<a id='restage'></a> Restage or Restart Your App

To enable your app to access the service instance, run `cf restage` or `cf restart` to restage or restart your app.

##<a id='credentials'></a> Obtain Credentials for Accessing Your Service Instance

After a service instance is bound to an app, the credentials of your Redis database are stored in the environment variables of the app. Run `cf env APP-NAME` to display the environment variables.

You can find the credentials in the <a href="http://docs.pivotal.io/pivotalcf/devguide/deploy-apps/environment-variable.html#VCAP-SERVICES" target="_blank">VCAP_SERVICES</a> key.

<pre class="terminal">
$ cf env a9s-redis-app
Getting env variables for app a9s-redis-app in org test / space test as admin...
OK

System-Provided:
{
 "VCAP_SERVICES": {
  "a9s-redis": [
   {
    "credentials": {
     "host": "EXAMPLE-HOST",
     "password": "EXAMPLE-PWD",
     "port": 6379
    },
    "label": "a9s-redis",
    "name": "my-redis-service",
    "plan": "redis-single-non-persistent-small",
   }
  ]
 }
}
...
</pre>

You can use the host and password values to connect to your database with a Redis client.

##<a id='deleting'></a> Delete a a9s Redis for PCF Service Instance

<p class="note warning"><strong>WARNING</strong>: Before deleting a service instance, you must backup data stored in your database. This operation cannot be undone and all the data is lost when the service is deleted.</p>

Before you can delete a service instance, you must unbind it from all apps.

###<a id='list-instances'></a> List Available Services

Run `cf services` to list available services.

<pre class="terminal">
$ cf services

Getting services in org test / space test as admin...
OK

name                 service       plan                   bound apps        last operation
my-redis-service     a9s-redis     redis-single-small     a9s-redis-app     create succeeded
</pre>

This example shows that `my-redis-service` is bound to the `a9s-redis-app` app.

###<a id='unbind-instance'></a>Unbind a Service Instance

Run `cf unbind-service` to unbind the service from your app:

<pre class="terminal">
$ cf unbind-service a9s-redis-app my-redis-service
</pre>

###<a id='delete-instance'></a> Delete a Service Instance

After unbinding the service, it is no longer bound to an app. Run `cf delete-service` to delete the service:

<pre class="terminal">
$ cf delete-service my-redis-service
</pre>

It might take several minutes to delete the service. Deleting a service deprovisions the corresponding infrastructure resources.
Run the `cf services` command to view the deletion status.


##<a id='upgrade-service-plan'></a> Upgrade the Service Instance to another Service Plan

Once created, you can upgrade your service instance to another, larger service plan.
A larger service plan provides more CPU, RAM and storage.
For more information, see <a href="http://docs.pivotal.io/pivotalcf/devguide/services/managing-services.html#update_service" target="_blank">Update a Service Instance</a> of the _Managing Service Instances with the cf CLI_.

<pre class="terminal">
$ cf update-service my-redis-service -p a-bigger-plan
</pre>

Here are the plans you can upgrade to depending on the one you are currently
using:

* If you are currently using the `redis-single-small` plan, you can upgrade to `redis-single-big` plan.
* If you are currently using the `redis-cluster-small` plan, you can upgrade to `redis-cluster-big` plan.

##<a id='redis-persitence'></a>Change RDB Persistence Settings

a9s Redis for PCF supports RDB persistence with point in time snapshots.
This setting can be changed by the user.

### Default behavior

| Setting | Effect |
|---------|--------|
| save 900 1 | Create a snapshot after 900 seconds if 1 write operations occurred. |
| save 300 10 | Create a snapshot after 300 seconds if 10 write operations occurred. |
| save 60 10000 | Create a snapshot after 300 seconds if 10 write operations occurred. |

### Configuring RDB
You can configure RDB according to the needs of your apps by providing customer settings. This setting must follow the original Redis configuration for RDB `-c {"snapshot": "['save 900 1', 'save 300 10']"}`.

<pre class="terminal">
  $ cf update-service my-redis-service -c {"snapshot": "['save 900 1', 'save 300 10']"}
</pre>

In this example, it configures to snapshot the Redis database according to the following rules:

| Setting | Effect |
|---------|--------|
| save 900 1 | Create a snapshot after 900 seconds if 1 write operations occurred. |
| save 300 10 | Create a snapshot after 300 seconds if 10 write operations occurred. |

### Cache Only
You can disable snapshots and use Redis as cache only by creating the service with the following customer setting `-c '{"snapshot": "[]"}'`.

The command is:

<pre class="terminal">
  $ cf update-service my-redis-service -c {"snapshot": "[]"}
</pre>

For more information, see the snapshot settings in the documentation of <a href="https://redis.io/topics/persistence" target="_blank">Redis Persistence</a>.


##<a id='redis-memory-policy'></a>Change Maxmemory Policy

With the maxmemory-policy you can configure a9s Redis for PCF which key to remove when maxmemory is reached.
Ther are several configurable behaviors. `noeviction` is the default.


| Setting | Effect |
|---------|--------|
| volatile-lru | remove the key with an expire set using an LRU algorithm |
| allkeys-lru | remove any key according to the LRU algorithm |
| volatile-random | remove a random key with an expire set |
| allkeys-random | remove a random key, any key |
| volatile-ttl | remove the key with the nearest expire time (minor TTL) |
| noeviction | don't expire at all, just return an error on write operations |


You can use `-c {"maxmemory_policy": "volatile-ttl"}` to update the maxmemory-policy.

<pre class="terminal">
  $ cf update-service my-redis-service -c {"maxmemory_policy": "volatile-ttl"}
</pre>

For more information, see the maxmemory-policy settings in the self documented <a href="https://raw.githubusercontent.com/antirez/redis/3.2/redis.conf" target="_blank">redis.conf</a>.

##<a id='redis-sentinel'></a>Redis Sentinel

a9s Redis for PCF uses <a href="https://redis.io/topics/sentinel" target="_blank">Redis Sentinel</a> to provide a high available replication set.
Redis Sentinel is monitoring the several nodes, takes care about the automatic failover and is able to send notifcation when something in the cluster is changing.

a9s Redis for PCF provides two settings to adjust the cluster behaviour.
`min_slaves_max_lag` and `down_after_milliseconds`

| Setting | Effect |
|---------|--------|
| min\_slaves\_max\_lag | Time in seconds how long the master waits before he stops accepting writes when slaves are no more reachable. Default is 10 seconds. min-slaves-to-write can not be changed, it is fxed set to 1. See [redis.conf](https://raw.githubusercontent.com/antirez/redis/3.2/redis.conf) |
| down\_after\_milliseconds | Number of milliseconds the master should be unreachable in order to consider it in S_DOWN state. Default is 30000 ms. See [sentinel.conf](http://download.redis.io/redis-stable/sentinel.conf) |


<pre class="terminal">
  $ cf update-service my-redis-service -c {"min_slaves_max_lag": "10"}
</pre>


<pre class="terminal">
  $ cf update-service my-redis-service -c {"down_after_milliseconds": "30000"}
</pre>



##<a id='add-graphite-endpoint'></a>Add a Graphite Endpoint

If you want to monitor your service with Graphite, you can set an endpoint to
where to information will be sent with the `cf update-service` command. This command expects the <a href="http://docs.pivotal.io/pivotalcf/devguide/services/managing-services.html#arbitrary-params-update" target="_blank">-c flag</a>
and a JSON string containing the `graphite` and `metrics_prefix` keys.

<pre class="terminal">
$ cf update-service my-redis-service -c '{ "graphite": ["yourspace.your-graphite-endpoint.com:12345"], "metrics_prefix": "your-api-key.my-redis" }'
</pre>

##<a id='add-syslog-endpoint'></a>Add a Syslog Endpoint

The `cf update-service` command used with the <a href="http://docs.pivotal.io/pivotalcf/devguide/services/managing-services.html#arbitrary-params-update" target="_blank">-c flag</a> can let you stream your syslog to a third-party service. In this case, the command expects a JSON string containing the `syslog` key.

<pre class="terminal">
$ cf update-service my-redis-service -c '{ "syslog": ["logs4.your-syslog-endpoint.com:54321"] }'
</pre>
